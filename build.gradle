def DEVELOPMENT = true

buildscript {
    def DEVELOPMENT2 = true

    ext {
        springBootVersion = "1.3.3.RELEASE"
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/plugins-release" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "http://repo.jenkins-ci.org/public" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")

        if (DEVELOPMENT2) {
            classpath("org.springframework:springloaded:1.2.5.RELEASE")
        }
    }
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "spring-boot"

apply plugin: "propdeps"
apply plugin: "propdeps-maven"
apply plugin: "propdeps-idea"
apply plugin: "propdeps-eclipse"

jar {
    baseName = "hello-review"
    version = "0.0.1"
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/release" }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/plugins-release" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "http://repo.jenkins-ci.org/public" }
}

ext["springBootVersion"] = "1.3.3.RELEASE"
ext["jetty.version"] = "9.3.8.v20160314";
ext["hibernate.version"] = "5.1.0.Final";

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")

    if (DEVELOPMENT) {
        compile("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    }

    optional("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")

    compile("com.h2database:h2:1.4.191")
    compile("org.hibernate:hibernate-java8:5.1.0.Final");

    compile("org.pac4j:spring-webmvc-pac4j:1.0.2")
    compile("org.pac4j:pac4j-oauth:1.8.7")

    compile("org.kohsuke:github-api:1.73")
    compile("com.squareup.okhttp:okhttp:2.7.5")
    compile("com.squareup.okhttp:okhttp-urlconnection:2.7.5")

    compile("org.eclipse.jgit:org.eclipse.jgit:4.2.0.201601211800-r")
    compile("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.7.3")
    compile("org.codehaus.woodstox:woodstox-core-asl:4.4.1")

    compile("org.apache.poi:poi:3.14")
    compile("org.apache.poi:poi-ooxml:3.14")
    compile("com.jayway.awaitility:awaitility:1.7.0")

    compile("org.jetbrains:annotations:15.0")
    compile("org.apache.commons:commons-collections4:4.1")
    compile("org.apache.commons:commons-lang3:3.4")
    compile("com.google.guava:guava:19.0")

    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testCompile("junit:junit:4.12")
}

compileJava.dependsOn(processResources)

eclipse {
    classpath {
        containers.remove("org.eclipse.jdt.launching.JRE_CONTAINER")
        containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.12"
}
